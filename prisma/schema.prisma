// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL") 

}

model User {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  email    String  @unique 
  password String
  role     Role    @default(TUTOR)
  tutor    Tutor?
  parent   Parent?
}

model Tutor {
  id                  String       @id @default(auto()) @map("_id") @db.ObjectId
  fullName            String    
  email               String    @unique 
  phone               String   
  gender              Gender
  age                 Int?
  acadStatus          String?
  UEE                 Int?
  cGPA                Float?
  field               String?  
  college             String?
  volenteerism        String?
  prevTutored         Boolean?
  prevTutorGrades     String[]
  prevTutorExperience String?
  idealTutor          String?
  preferredBank       String?
  bankAccountNo       String?
  contactName         String?
  telegramUsername    String?
  contactPhone1       String?   
  contactPhone2       String?  
  contactEmail        String?   
  workDays            Int?
  workHour            Int?
  experience          Boolean?
  subjects            String[]
  location            String    
  essay               String?
  hobby               String?
  profilePicture      String?
  hiredJobId          Int?
  reports             Report[]
  timeSheets          Image []
  jobIDs       String[] @db.ObjectId
  jobs                Job[]  @relation(fields: [jobIDs], references: [id])
 studentIds String[] @db.ObjectId
  students   Student[] @relation( fields: [studentIds], references: [id])
  role                Role      @default(TUTOR)
  status              Status    @default(PENDING)
  user                User?     @relation(fields: [userId], references: [id])
  userId              String?      @unique@db.ObjectId
  followup            TutorFollowup[]
}

model Job {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  title        String? 
  subtitle     String?  
  subjects     String[]
  location     String
  grade        String  
  description  String?
  workDays     Int?
  workHour     Int?
  hiredTutorId Int?
  tutorIDs       String[] @db.ObjectId
  tutors       Tutor[]  @relation(fields: [tutorIDs], references: [id])
  status       Status   @default(PENDING)
}
model Report {
  
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  totalDays       String
  totalHours      String
  month           String
  week            String
  feedback        String
  pastChallenge   String
  futureChallenge String
  helpChallenge   String
  dressing        String
  grooming        String
  hygiene         String
  punctuality     String
  manner          String
  elequence       String
  reports         Json ?
  reportDate      Int
  reportMonth     Int
  reportYear      Int
  tutor           Tutor    @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  tutorId         String @db.ObjectId
  parent           Parent    @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId         String @db.ObjectId
  tutorName       String
  rate         Int   @default(0)
  status      Status   @default(PENDING)
  view      View @default(PENDING)
  comment         String?
}
// model Report {
//   id              Int      @id @default(autoincrement())
//   professionality String?
//   semiTotalHour   String?
//   noDays          String?
//   feedback        String?
//   envChallenge    String?
//   tuteeChallenge  String?
//   yourChallenge   String?
//   envResponse     String?
//   tuteeResponse   String?
//   yourResponse    String?
//   envHelp         String?
//   tuteeHelp       String?
//   yourHelp        String?
//   quiz            String?
//   assg            String?
//   test            String?
//   subjects        String?
//   topics          String?
//   reportdate      DateTime @default(now())
//   tutor           Tutor    @relation(fields: [tutorId], references: [id], onDelete: Cascade)
//   tutorId         Int
// }


model Parent {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  fullName       String    
  email          String?    @map("{'unique': true, 'partialFilterExpression': {'email': {'$exists': true}}}")
  phone1         String?    
  phone2         String?  
  location       String    
  preferredBank  String?   
  profilePicture String?
  students       Student[]
  role           Role      @default(PARENT)
  status         Status    @default(PENDING)
  user           User?     @relation(fields: [userId], references: [id])
  userId         String?     @unique()  @db.ObjectId
  timeSheets      Image[]
  followup        ParentFollowup[]
  reports         Report[]
  
}

model Admin {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  email    String @unique 
  password String
  role     Role   @default(ADMIN)
}
model Student {
  id                 String       @id @default(auto()) @map("_id") @db.ObjectId
  fullName            String   
  nickName            String?  
  gender              String?
  age                 Int?
  subjects            String[]
  grade               String?
  school              String?
  address             String?
  hobby               String?
  prevTutored         Boolean?
  prevTutorExperience String?
  idealTutor          String?
  workDays            Int?
  workHour            Int?
  tutorIds           String[] @db.ObjectId
  tutors     Tutor[]  @relation(fields: [tutorIds], references: [id])
  parent              Parent   @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId            String   @db.ObjectId
  status              Status   @default(PENDING)
  
}

model Grades {
  id     Int       @id@default(1) @map("_id") 
  kG    Int   @default(0)
  from1Ton4   Int @default(0)
  from5To6     Int @default(0)
  from7To8     Int @default(0)
  from9To10    Int @default(0)
  from11T012   Int @default(0)  


}
model ParentInYear {ectId
  id  String       @id  @map("_id") 
  month Int 
  year Int 
  parentRegisterNumber Int @default(0)
}


model Image {
  id  String       @id @default(auto()) @map("_id") @db.ObjectId
  tutor           Tutor    @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  tutorId         String @db.ObjectId
  month   Int
  cloudinary_id String 
  listStudent Json
  year Int
  statusOfAcceptance Status  @default(PENDING)
  statusOfMoneySent Status  @default(PENDING)
  parent           Parent    @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId         String @db.ObjectId
  statusOfMoneyPaid Status @default(PENDING)
  view      View @default(PENDING)
  

}
model ParentFollowup {
   id  String       @id @default(auto()) @map("_id") @db.ObjectId
  parent           Parent    @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId         String @db.ObjectId
  month Int
  year Int
  comment String
  satisfaction String
  status String
  
}

model TutorFollowup {
  id  String       @id @default(auto()) @map("_id") @db.ObjectId
  tutor           Tutor    @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  tutorId         String @db.ObjectId
  month Int
  year Int
  comment String
  satisfaction String
  status String
  strength String
  weakness String
  opportunity String
  threat String
  assesment String
  authenticity String

}
enum Gender {
  Male
  Female
}

enum Role {
  TUTOR
  PARENT
  ADMIN
  SUPERADMIN
  ADMINONE
  ADMINTWO
  ADMINTHREE
}

enum Status {
  PENDING
  FAILED
  SUCCESS
  REJECTED
}

enum View {
  SEEN
  PENDING
}